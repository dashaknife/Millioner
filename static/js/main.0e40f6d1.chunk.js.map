{"version":3,"sources":["components/question/Question.js","components/answer/Answer.js","components/money/Money.js","components/img/menu.svg","components/img/cross.svg","components/img/picture.svg","components/QuizMain.js","App.js","components/First.js","serviceWorker.js","index.js"],"names":["Question","props","question","variant","Answer","answers","Object","keys","answer","map","qAnswer","i","className","viewBox","points","fill","stroke","strokeWidth","correctAnswer","clickedAnswer","onClick","checkAnswer","x","y","alignmentBaseline","textAnchor","disabled","Money","moneys","money","qMoney","length","step","Quiz","state","require","correctAnswers","score","setState","setTimeout","this","quiestions","htmlFor","id","src","menu","alt","cross","type","picture","to","Component","App","Test","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","path","First","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0e40f6d1.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Question = (props) => {\r\n    return (\r\n        <p>{props.question}</p>\r\n    );\r\n}\r\n\r\nexport default Question;\r\n","import React from 'react';\r\nimport './Answer.css';\r\n\r\nlet variant = [\"A:\", \"B:\", \"C:\", \"D:\"];\r\nconst Answer = (props) => {\r\n    let answers = Object.keys(props.answer).map((qAnswer, i) => (\r\n        <svg className=\"variant\" viewBox=\"0 0 300 55\">\r\n            <polygon points=\"0 25,15 25, 40 3, 260 3,285 25, 300 25,\r\n                        285 25,260 50, 40 50,15 25\" fill=\"white\" stroke=\"#D0D0D8\" strokeWidth=\"2\"\r\n                className=\r\n                {\r\n                    props.correctAnswer === qAnswer ? 'correct' : props.clickedAnswer === qAnswer ? 'incorrect' : ''\r\n                }\r\n                onClick={() => props.checkAnswer(qAnswer)}\r\n                key={qAnswer}></polygon>\r\n            <text x=\"20%\" y=\"50%\" alignmentBaseline=\"middle\" textAnchor=\"middle\" className=\"text_1\">\r\n                {variant[qAnswer - 1]}\r\n            </text>\r\n            <text x=\"25%\" y=\"50%\" alignmentBaseline=\"middle\" className=\"text_1 text_2\">\r\n                {props.answer[qAnswer]}\r\n            </text>\r\n        </svg>\r\n\r\n    ));\r\n\r\n    return (\r\n        <>\r\n            <div disabled={props.clickedAnswer ? true : false} className=\"options\">\r\n                {answers}\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Answer;\r\n","import React from 'react';\r\nimport './../answer/Answer.css';\r\n\r\nconst Money = (props) => {\r\n    let moneys = Object.keys(props.money).map((qMoney) => (\r\n        <svg className=\"current_score\" viewBox=\"0 0 300 36\">\r\n            <polygon points=\"0 20,55 20, 70 8, 230 8,245 20, 300 20,\r\n                245 20,230 35, 70 35,55 20\" fill=\"white\" stroke=\"#D0D0D8\" strokeWidth=\"2\"\r\n                className=\r\n                {\r\n                    props.money[qMoney] === props.money[Object.keys(props.money).length - props.step + 1] ? 'current'\r\n                        : qMoney > Object.keys(props.money).length - props.step + 1 ? 'waisted' : ''\r\n                }\r\n            ></polygon>\r\n            <text x=\"50%\" y=\"60%\" alignmentBaseline=\"middle\" textAnchor=\"middle\" className={\r\n                qMoney > Object.keys(props.money).length - props.step + 1 ? 'waisted' : ''}>\r\n                {props.money[qMoney]}\r\n            </text>\r\n        </svg>\r\n    ));\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                {moneys}\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Money;\r\n","export default __webpack_public_path__ + \"static/media/menu.5c0069c6.svg\";","export default __webpack_public_path__ + \"static/media/cross.a965c6f5.svg\";","export default __webpack_public_path__ + \"static/media/picture.86c75521.svg\";","import React, { Component } from 'react';\r\nimport Question from './question/Question';\r\nimport Answer from './answer/Answer';\r\nimport Money from './money/Money';\r\nimport './QuizMain.css';\r\nimport menu from './img/menu.svg';\r\nimport cross from './img/cross.svg';\r\nimport picture from './img/picture.svg';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default class Quiz extends Component {\r\n    state = require('./QuizMain.json');\r\n\r\n    // the method that checks the correct answer\r\n    checkAnswer = answer => {\r\n        const { correctAnswers, step, score, moneys } = this.state;\r\n        if (answer === correctAnswers[step]) {\r\n            this.setState({\r\n                score: score + 1,\r\n                money: moneys[Object.keys(moneys).length - step + 1],\r\n                correctAnswer: correctAnswers[step],\r\n                clickedAnswer: answer\r\n            });\r\n            setTimeout(() =>\r\n                this.setState({\r\n                    step: step + 1,\r\n                    correctAnswer: 0,\r\n                    clickedAnswer: 0\r\n                }), 1000);\r\n\r\n        } else {\r\n            this.setState({\r\n                correctAnswer: 0,\r\n                clickedAnswer: answer\r\n            });\r\n            setTimeout(() =>\r\n                this.setState({\r\n                    step: step + 12,\r\n                    correctAnswer: 0,\r\n                    clickedAnswer: 0\r\n                }), 1000);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let { quiestions, answers, correctAnswer, clickedAnswer, step, money, moneys } = this.state;\r\n        return (\r\n            <div className=\"second_content\">\r\n                <label className=\"link\" htmlFor=\"cb\" id=\"menu\">\r\n                    <img src={menu} alt=\"\" className=\"menu\"></img>\r\n                    <img src={cross} alt=\"\" className=\"cross\"></img>\r\n                </label>\r\n                <input type=\"checkbox\" id=\"cb\"></input>\r\n\r\n                {step <= Object.keys(quiestions).length ?\r\n                    (<>\r\n                        <div className=\"second_content_1\">\r\n                            <div className=\"second_content_3\">\r\n                                <h3><Question question={quiestions[step]} /></h3>\r\n                            </div>\r\n                            <div className=\"second_content_3\">\r\n                                <Answer\r\n                                    answer={answers[step]}\r\n                                    step={step}\r\n                                    checkAnswer={this.checkAnswer}\r\n                                    correctAnswer={correctAnswer}\r\n                                    clickedAnswer={clickedAnswer}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                        <div id=\"second_content_2\">\r\n                            <Money\r\n                                money={moneys}\r\n                                step={step}\r\n                            />\r\n                        </div>\r\n                    </>) : (\r\n                        <div className=\"first_content\">\r\n                            <img className=\"hand\" src={picture} alt=\"\"></img>\r\n                            <div className=\"first_content_1\">\r\n                                <h2>Total score:</h2>\r\n                                <h1>{money} earned</h1>\r\n                                <Link to='/First' className=\"start_button\">Try again</Link>\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport Quiz from './components/QuizMain';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Quiz />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React, { Component } from 'react';\r\nimport picture from './img/picture.svg';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass Test extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"second_content\">\r\n        <div className=\"background\"></div>\r\n        <div className=\"first_content\">\r\n          <img className=\"hand\" src={picture} alt=\"\"></img>\r\n          <div className=\"first_content_1\">\r\n            <h1>Who wants to be a millionaire?</h1>\r\n            <Link to='/App' className=\"start_button\">\r\n              Start\r\n            </Link>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Test;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport First from './components/First';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\n\r\nimport {BrowserRouter as Router, Switch, Route\r\n} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Router>\r\n\r\n    <Switch>\r\n          <Route path=\"/App\">\r\n            <App />\r\n          </Route>\r\n          \r\n          <Route path=\"/\">\r\n            <First />\r\n          </Route>\r\n      </Switch>\r\n\r\n\r\n\r\n    </Router>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}